// Mocks generated by Mockito 5.4.6 from annotations
// in cos_challenge/test/presenter/home/home_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:cos_challenge/data/models/suggestion_model.dart' as _i6;
import 'package:cos_challenge/data/models/user.dart' as _i3;
import 'package:cos_challenge/data/models/vehicle_model.dart' as _i5;
import 'package:cos_challenge/data/repositories/auth/auth_repository.dart'
    as _i8;
import 'package:cos_challenge/presenter/home/home_controller.dart' as _i4;
import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeValueNotifier_0<T> extends _i1.SmartFake
    implements _i2.ValueNotifier<T> {
  _FakeValueNotifier_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUser_1 extends _i1.SmartFake implements _i3.User {
  _FakeUser_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [HomeController].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeController extends _i1.Mock implements _i4.HomeController {
  MockHomeController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValueNotifier<bool> get isLoading =>
      (super.noSuchMethod(
            Invocation.getter(#isLoading),
            returnValue: _FakeValueNotifier_0<bool>(
              this,
              Invocation.getter(#isLoading),
            ),
          )
          as _i2.ValueNotifier<bool>);

  @override
  _i2.ValueNotifier<_i5.VehicleModel?> get vehicle =>
      (super.noSuchMethod(
            Invocation.getter(#vehicle),
            returnValue: _FakeValueNotifier_0<_i5.VehicleModel?>(
              this,
              Invocation.getter(#vehicle),
            ),
          )
          as _i2.ValueNotifier<_i5.VehicleModel?>);

  @override
  _i2.ValueNotifier<List<_i6.SuggestionModel>> get suggestions =>
      (super.noSuchMethod(
            Invocation.getter(#suggestions),
            returnValue: _FakeValueNotifier_0<List<_i6.SuggestionModel>>(
              this,
              Invocation.getter(#suggestions),
            ),
          )
          as _i2.ValueNotifier<List<_i6.SuggestionModel>>);

  @override
  _i2.ValueNotifier<String?> get error =>
      (super.noSuchMethod(
            Invocation.getter(#error),
            returnValue: _FakeValueNotifier_0<String?>(
              this,
              Invocation.getter(#error),
            ),
          )
          as _i2.ValueNotifier<String?>);

  @override
  _i7.Future<void> searchByVin(String? searchText) =>
      (super.noSuchMethod(
            Invocation.method(#searchByVin, [searchText]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> getVehicleFromSuggestion() =>
      (super.noSuchMethod(
            Invocation.method(#getVehicleFromSuggestion, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void signOut() => super.noSuchMethod(
    Invocation.method(#signOut, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i8.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.User?> autoLogin() =>
      (super.noSuchMethod(
            Invocation.method(#autoLogin, []),
            returnValue: _i7.Future<_i3.User?>.value(),
          )
          as _i7.Future<_i3.User?>);

  @override
  _i7.Future<_i3.User> signIn(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#signIn, [email, password]),
            returnValue: _i7.Future<_i3.User>.value(
              _FakeUser_1(this, Invocation.method(#signIn, [email, password])),
            ),
          )
          as _i7.Future<_i3.User>);

  @override
  _i7.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}
